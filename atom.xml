<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Emily&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yehanzhou.github.io/"/>
  <updated>2017-06-14T13:42:22.000Z</updated>
  <id>https://yehanzhou.github.io/</id>
  
  <author>
    <name>Emily Zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从浏览器输入一个地址到渲染出网页的过程</title>
    <link href="https://yehanzhou.github.io/2017/06/14/net-process/"/>
    <id>https://yehanzhou.github.io/2017/06/14/net-process/</id>
    <published>2017-06-14T13:40:40.000Z</published>
    <updated>2017-06-14T13:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><a href="http://abc.com:80/z/c?i=1#b" target="_blank" rel="external">http://abc.com:80/z/c?i=1#b</a><br>http协议 uri 端口号 路径 参数 片段</p>
</li>
<li><p>域名通过dns解析成ip</p>
<ul>
<li>首先查询浏览器缓存</li>
<li>再查询系统缓存</li>
<li>再递归查询dns服务器</li>
</ul>
</li>
<li><p>建立tcp链接，三次握手</p>
<ul>
<li>syn-》</li>
<li>《- syn/ack</li>
<li>ack -》</li>
</ul>
</li>
<li><p>http报文生成</p>
<ul>
<li>报文首部<ol>
<li>请求行 PUT  example.html  HTTP1.1</li>
<li>请求首部字段：Accept等</li>
</ol>
</li>
<li>报文体</li>
</ul>
</li>
<li>包装报文，经过链路层（mac），传输层（tcp），网络层（ip），应用层（http）</li>
<li>服务器接收到HTTP请求</li>
</ol>
<p>服务器接收到数据之后，会经过链路层，网络层，传输层逐层将该层对应的首部信息去掉</p>
<p>7． 服务器根据收到的HTTP数据，生成对应的响应报文,结构如下：</p>
<p>  状态行：由HTTP 版本 状态码 原因短语构成<br>  响应首部字段 通用首部字段 实体首部字段 都可以查手册得知其具体内容以及含义这里不再展开</p>
<ol>
<li>客户端接收到了响应报文之后，浏览器渲染呈现<ol>
<li>浏览器通常的主要组件分为以下几部分：<ul>
<li>用户界面：如地址栏 书签菜单等等</li>
<li>浏览器引擎：在用户界面和呈现引擎之间传送之类</li>
<li>呈现引擎：负责显示请求的内容。例如HTMLhe CSS</li>
<li>JAVAScript解释器：用于解释和执行JavaScript 代码</li>
<li>数据存储</li>
</ul>
</li>
<li>渲染文档主要使用呈现引擎。<br>过程如下：<ol>
<li>呈现引擎从网络层获取请求文档的内容HTML文件，内容大小一般在8000个块以内。</li>
<li>引擎解析HTML文档 将各个标记转化为内容树上的DOM节点 ，同时解析CSS文件 样式数据</li>
<li>样式信息和 内容树共同构建成为 呈现树</li>
<li>呈现树构建完毕以后，进入布局阶段， 为每一个节点分配一个应该出现在屏幕上的确切坐标</li>
<li>呈现引擎遍历呈现树 由用户界面后端层将每个节点绘制出来。</li>
</ol>
</li>
</ol>
</li>
</ol>
<ul>
<li><a href="http://www.cnblogs.com/zhongweian/p/6159778.html" target="_blank" rel="external">参考链接1</a></li>
<li><a href="https://segmentfault.com/q/1010000005086789" target="_blank" rel="external">参考链接2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://abc.com:80/z/c?i=1#b&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://abc.com:80/z/c?i=1#b&lt;/a&gt;&lt;br&gt;http协议 uri 端口号 路径 参数 片段&lt;
    
    </summary>
    
    
      <category term="http" scheme="https://yehanzhou.github.io/tags/http/"/>
    
      <category term="浏览器" scheme="https://yehanzhou.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>this的四种用法</title>
    <link href="https://yehanzhou.github.io/2017/06/14/this/"/>
    <id>https://yehanzhou.github.io/2017/06/14/this/</id>
    <published>2017-06-14T13:36:52.000Z</published>
    <updated>2017-06-14T13:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>在函数执行时，this 总是指向调用该函数的对象。</strong><br><strong>要判断 this 的指向，其实就是判断 this 所在的函数属于谁。</strong><br>在《javaScript语言精粹》这本书中，把 this出现的场景分为四类，简单的说就是：<br>有对象就指向调用对象,没调用对象就指向全局对象,用new构造就指向新对象，<br>通过 apply 或 call 或 bind 来改变 this 的所指。</p>
<h2 id="1-函数有所属对象时：指向所属对象"><a href="#1-函数有所属对象时：指向所属对象" class="headerlink" title="1. 函数有所属对象时：指向所属对象"></a>1. 函数有所属对象时：指向所属对象</h2><p>函数有所属对象时，通常通过 . 表达式调用，这时 this自然指向所属对象。比如下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;value: <span class="number">100</span>&#125;;</div><div class="line">myObject.getValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>.value); <span class="comment">// 输出 100</span></div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// 输出 &#123; value: 100, getValue: [Function] &#125;，</span></div><div class="line"> <span class="comment">// 其实就是 myObject 对象本身</span></div><div class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(myObject.getValue()); <span class="comment">// =&gt; 100</span></div></pre></td></tr></table></figure></p>
<p>getValue() 属于对象 myObject，并由 myOjbect 进行 . 调用，因此 this 指向对象 myObject。</p>
<h2 id="2-函数没有所属对象：指向全局对象"><a href="#2-函数没有所属对象：指向全局对象" class="headerlink" title="2. 函数没有所属对象：指向全局对象"></a>2. 函数没有所属对象：指向全局对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;value: <span class="number">100</span>&#125;;</div><div class="line">myObject.getValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">// 输出全局对象 global</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value) <span class="comment">// =&gt; undefined</span></div><div class="line"> &#125;;</div><div class="line"> foo();</div><div class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(myObject.getValue()); <span class="comment">// =&gt; 100</span></div></pre></td></tr></table></figure>
<p>在上述代码块中，foo 函数虽然定义在 getValue的函数体内，但实际上它既不属于 getValue 也不属于 myObject。foo 并没有被绑定在任何对象上，所以当调用时，它的 this 指针指向了全局对象 global。据说这是个设计错误。</p>
<h2 id="3-构造器中的-this：指向新对象"><a href="#3-构造器中的-this：指向新对象" class="headerlink" title="3. 构造器中的 this：指向新对象"></a>3. 构造器中的 this：指向新对象</h2><p>js 中，我们通过 new 关键词来调用构造函数，此时 this会绑定在该新对象上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SomeClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">this</span>.value = <span class="number">100</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myCreate = <span class="keyword">new</span> SomeClass();</div><div class="line"><span class="built_in">console</span>.log(myCreate.value); <span class="comment">// 输出100</span></div></pre></td></tr></table></figure></p>
<p>顺便说一句，在 js 中，构造函数、普通函数、对象方法、闭包，这四者没有明确界线。界线都在人的心中。</p>
<h3 id="4-apply-和-call-调用以及-bind-绑定：指向绑定的对象"><a href="#4-apply-和-call-调用以及-bind-绑定：指向绑定的对象" class="headerlink" title="4. apply 和 call 调用以及 bind 绑定：指向绑定的对象"></a>4. apply 和 call 调用以及 bind 绑定：指向绑定的对象</h3><ul>
<li>apply() 方法接受两个参数第一个是函数运行的作用域，另外一个是一个参数数组(arguments)。</li>
<li>call() 方法第一个参数的意义与apply()方法相同，只是其他的参数需要一个个列举出来。<br>简单来说，call 的方式更接近我们平时调用函数，而 apply 需要我们传递 Array 形式的数组给它。它们是可以互相转换的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;value: <span class="number">100</span>&#125;;</div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line">foo(); <span class="comment">// 全局变量 global</span></div><div class="line">foo.apply(myObject); <span class="comment">// &#123; value: 100 &#125;</span></div><div class="line">foo.call(myObject); <span class="comment">// &#123; value: 100 &#125;</span></div><div class="line"><span class="keyword">var</span> newFoo = foo.bind(myObject);</div><div class="line">newFoo(); <span class="comment">// &#123; value: 100 &#125;</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;在函数执行时，this 总是指向调用该函数的对象。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;要判断 this 的指向，其实就是判断 this 所在的函数属于谁。&lt;/strong&gt;&lt;br&gt;在《javaScript语言精粹》这本书中，把 this出现的场景分为四
    
    </summary>
    
    
      <category term="js基础" scheme="https://yehanzhou.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6 变量解构赋值</title>
    <link href="https://yehanzhou.github.io/2016/12/06/destructuring/"/>
    <id>https://yehanzhou.github.io/2016/12/06/destructuring/</id>
    <published>2016-12-06T03:17:21.000Z</published>
    <updated>2016-12-16T06:22:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么解构很有用"><a href="#为什么解构很有用" class="headerlink" title="为什么解构很有用"></a>为什么解构很有用</h2><p>ECMAScript 5以及以前的版本:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> options = &#123;</div><div class="line">  repeat: <span class="literal">true</span>,</div><div class="line">  save: <span class="literal">false</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// extract data from the object</span></div><div class="line"><span class="keyword">let</span> repeat = options.repeat, </div><div class="line">    save = options.save;</div></pre></td></tr></table></figure></p>
<p>虽然这段代码看上去也挺简单的,但想象一下如果你要给大量的变量赋值,你得一个一个的赋值。<br>或者你需要取一个嵌套结构数据的某个值,也许你得遍历整个结构。<br>如果你能把数据解构成一些小小的片段,那获取信息将会更加容易。</p>
<h2 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = &#123;</div><div class="line">  type: <span class="string">"Identifier"</span>,</div><div class="line">  name: <span class="string">"foo"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123; type, name &#125; = node;</div><div class="line"><span class="built_in">console</span>.log(type);      <span class="comment">// "Identifier"</span></div><div class="line"><span class="built_in">console</span>.log(name);      <span class="comment">// "foo"</span></div></pre></td></tr></table></figure>
<p><strong>注意:</strong> 必须初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// syntax error!</span></div><div class="line"><span class="keyword">var</span> &#123; type, name &#125;;</div><div class="line"><span class="comment">// syntax error!</span></div><div class="line"><span class="keyword">let</span> &#123; type, name &#125;;</div><div class="line"><span class="comment">// syntax error!</span></div><div class="line"><span class="keyword">const</span> &#123; type, name &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>可以赋值给已经定义过的变量:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = &#123;</div><div class="line">    type: <span class="string">"Identifier"</span>,</div><div class="line">    name: <span class="string">"foo"</span></div><div class="line">&#125;,</div><div class="line">type = <span class="string">"Literal"</span>,</div><div class="line">name = <span class="number">5</span>;</div><div class="line"><span class="comment">// assign different values using destructuring</span></div><div class="line">(&#123; type, name &#125; = node);</div><div class="line"><span class="built_in">console</span>.log(type);      <span class="comment">// "Identifier"</span></div><div class="line"><span class="built_in">console</span>.log(name);      <span class="comment">// "foo"</span></div></pre></td></tr></table></figure></p>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = &#123;</div><div class="line">    type: <span class="string">"Identifier"</span>,</div><div class="line">    name: <span class="string">"foo"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123; type, name, value = <span class="literal">true</span> &#125; = node;</div><div class="line"><span class="built_in">console</span>.log(type); <span class="comment">// "Identifier"</span></div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// "foo"</span></div><div class="line"><span class="built_in">console</span>.log(value); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="给不同名本地变量赋值"><a href="#给不同名本地变量赋值" class="headerlink" title="给不同名本地变量赋值"></a>给不同名本地变量赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = &#123;</div><div class="line">    type: <span class="string">"Identifier"</span>,</div><div class="line">    name: <span class="string">"foo"</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123; type: localType, name: localName &#125; = node;</div><div class="line"><span class="built_in">console</span>.log(localType);     <span class="comment">// "Identifier"</span></div><div class="line"><span class="built_in">console</span>.log(localName);     <span class="comment">// "foo"</span></div></pre></td></tr></table></figure>
<h3 id="嵌套对象解构"><a href="#嵌套对象解构" class="headerlink" title="嵌套对象解构"></a>嵌套对象解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = &#123;</div><div class="line">    type: <span class="string">"Identifier"</span>,</div><div class="line">    name: <span class="string">"foo"</span>,</div><div class="line">    loc: &#123;</div><div class="line">        start: &#123;</div><div class="line">            line: <span class="number">1</span>,</div><div class="line">            column: <span class="number">1</span> </div><div class="line">            &#125;,</div><div class="line">        end: &#123;</div><div class="line">            line: <span class="number">1</span>,</div><div class="line">            column: <span class="number">4</span></div><div class="line">            &#125;</div><div class="line">        &#125; </div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123; loc: &#123; start &#125;&#125; = node;</div><div class="line"><span class="built_in">console</span>.log(start.line); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(start.column); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h2 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</div><div class="line"><span class="keyword">let</span> [ firstColor, secondColor ] = colors;</div><div class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></div><div class="line"><span class="built_in">console</span>.log(secondColor);       <span class="comment">// "green"</span></div></pre></td></tr></table></figure>
<p>只取你需要的部分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</div><div class="line"><span class="keyword">let</span> [ , , thirdColor ] = colors;</div><div class="line"><span class="built_in">console</span>.log(thirdColor);        <span class="comment">// "blue"</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 和对象的解构一样,必须初始化</p>
<h3 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>可以赋值给已经定义过的变量:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ],</div><div class="line">    firstColor = <span class="string">"black"</span>,</div><div class="line">    secondColor = <span class="string">"purple"</span>;</div><div class="line">[ firstColor, secondColor ] = colors;</div><div class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></div><div class="line"><span class="built_in">console</span>.log(secondColor);       <span class="comment">// "green"</span></div></pre></td></tr></table></figure></p>
<p>在ECMAScript 5 中交换变量值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</div><div class="line">    b = <span class="number">2</span>, tmp;</div><div class="line">tmp = a;</div><div class="line">a = b;</div><div class="line">b = tmp;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p>在ECMAScript 6 中交换变量值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</div><div class="line">    b = <span class="number">2</span>;</div><div class="line">[ a, b ] = [ b, a ];</div><div class="line"><span class="built_in">console</span>.log(a);     <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(b);     <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span> ];</div><div class="line"><span class="keyword">let</span> [ firstColor, secondColor = <span class="string">"green"</span> ] = colors;</div><div class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></div><div class="line"><span class="built_in">console</span>.log(secondColor);       <span class="comment">// "green"</span></div></pre></td></tr></table></figure>
<h3 id="嵌套数组解构"><a href="#嵌套数组解构" class="headerlink" title="嵌套数组解构"></a>嵌套数组解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, [ <span class="string">"green"</span>, <span class="string">"lightgreen"</span> ], <span class="string">"blue"</span> ];</div><div class="line"><span class="comment">// later</span></div><div class="line"><span class="keyword">let</span> [ firstColor, [ secondColor ] ] = colors;</div><div class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></div><div class="line"><span class="built_in">console</span>.log(secondColor);       <span class="comment">// "green"</span></div></pre></td></tr></table></figure>
<h3 id="剩余的元素"><a href="#剩余的元素" class="headerlink" title="剩余的元素"></a>剩余的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</div><div class="line"><span class="keyword">let</span> [ firstColor, ...restColors ] = colors;</div><div class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></div><div class="line"><span class="built_in">console</span>.log(restColors.length); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(restColors[<span class="number">0</span>]);     <span class="comment">// "green"</span></div><div class="line"><span class="built_in">console</span>.log(restColors[<span class="number">1</span>]);     <span class="comment">// "blue"</span></div></pre></td></tr></table></figure>
<p>数组的第一个值赋给了firstColor,剩下的值组成了一个新的数组赋给了restColors。</p>
<p>ECMAScript 5克隆一个数组:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</div><div class="line"><span class="keyword">var</span> clonedColors = colors.concat();</div><div class="line"><span class="built_in">console</span>.log(clonedColors);   <span class="comment">// "[red,green,blue]"</span></div></pre></td></tr></table></figure></p>
<p>ECMAScript 6克隆一个数组:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</div><div class="line"><span class="keyword">let</span> [ ...clonedColors ] = colors;</div><div class="line"><span class="built_in">console</span>.log(clonedColors);  <span class="comment">// "[red,green,blue]"</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong> 剩余的元素必须是解构数组的最后一个元素,后面不能有逗号。</p>
<h3 id="混合解构"><a href="#混合解构" class="headerlink" title="混合解构"></a>混合解构</h3><p>对象与数组嵌套混合的解构:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = &#123;</div><div class="line">    type: <span class="string">"Identifier"</span>,</div><div class="line">    name: <span class="string">"foo"</span>,</div><div class="line">    loc: &#123;</div><div class="line">        start: &#123;</div><div class="line">            line: <span class="number">1</span>,</div><div class="line">column: <span class="number">1</span> &#125;,</div><div class="line">        end: &#123;</div><div class="line">            line: <span class="number">1</span>,</div><div class="line">column: <span class="number">4</span> &#125;</div><div class="line">&#125;,</div><div class="line">    range: [<span class="number">0</span>, <span class="number">3</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123;</div><div class="line">    loc: &#123; start &#125;,</div><div class="line">    range: [ startIndex ]</div><div class="line">&#125; = node;</div><div class="line"><span class="built_in">console</span>.log(start.line); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(start.column); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(startIndex); <span class="comment">// 0</span></div></pre></td></tr></table></figure></p>
<h2 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, &#123; secure, path, domain, expires &#125;</span>) </span>&#123;</div><div class="line">    <span class="comment">// code to set the cookie</span></div><div class="line">&#125;</div><div class="line">setCookie(<span class="string">"type"</span>, <span class="string">"js"</span>, &#123;</div><div class="line">    secure: <span class="literal">true</span>,</div><div class="line">    expires: <span class="number">60000</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="解构的参数是必需的"><a href="#解构的参数是必需的" class="headerlink" title="解构的参数是必需的"></a>解构的参数是必需的</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// error!</span></div><div class="line">setCookie(<span class="string">"type"</span>, <span class="string">"js"</span>);</div></pre></td></tr></table></figure>
<p>它实际上是这样运行的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, options</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> &#123; secure, path, domain, expires &#125; = options;</div><div class="line">    <span class="comment">// code to set the cookie</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当解构赋值的右边是null或者undefined,就会抛出错误。</p>
<p>如果你希望解构参数是可选的,你可以这样写:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, &#123; secure, path, domain, expires &#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">    <span class="comment">// empty &#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="解构参数的默认值"><a href="#解构参数的默认值" class="headerlink" title="解构参数的默认值"></a>解构参数的默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value,</span></span></div><div class="line">    &#123;</div><div class="line">        secure = false,</div><div class="line">        path = "/",</div><div class="line">        domain = "example.com",</div><div class="line">        expires = new Date(Date.now() + 360000000)</div><div class="line">&#125; = &#123;&#125; )&#123;</div><div class="line"><span class="comment">// empty &#125;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么解构很有用&quot;&gt;&lt;a href=&quot;#为什么解构很有用&quot; class=&quot;headerlink&quot; title=&quot;为什么解构很有用&quot;&gt;&lt;/a&gt;为什么解构很有用&lt;/h2&gt;&lt;p&gt;ECMAScript 5以及以前的版本:&lt;br&gt;&lt;figure class=&quot;highlig
    
    </summary>
    
      <category term="理解ECMAScript 6" scheme="https://yehanzhou.github.io/categories/%E7%90%86%E8%A7%A3ECMAScript-6/"/>
    
    
      <category term="ECMAScript 6" scheme="https://yehanzhou.github.io/tags/ECMAScript-6/"/>
    
  </entry>
  
  <entry>
    <title>node连接mysql数据库实例</title>
    <link href="https://yehanzhou.github.io/2016/11/18/node-mysql/"/>
    <id>https://yehanzhou.github.io/2016/11/18/node-mysql/</id>
    <published>2016-11-18T07:07:33.000Z</published>
    <updated>2016-11-21T09:19:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express生成应用"><a href="#Express生成应用" class="headerlink" title="Express生成应用"></a>Express生成应用</h2><p>首先假定你已经安装了<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>，接下来通过应用生成器工具 express 可以快速创建一个应用的骨架。<br>通过如下命令安装express和express-generator：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install express -g</div><div class="line">$ npm install express-generator -g</div></pre></td></tr></table></figure></p>
<p>当前工作目录下创建一个命名为 myapp 的应用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ express myapp</div><div class="line"></div><div class="line">   create : myapp</div><div class="line">   create : myapp/package.json</div><div class="line">   create : myapp/app.js</div><div class="line">   create : myapp/public</div><div class="line">   create : myapp/public/javascripts</div><div class="line">   create : myapp/public/images</div><div class="line">   create : myapp/routes</div><div class="line">   create : myapp/routes/index.js</div><div class="line">   create : myapp/routes/users.js</div><div class="line">   create : myapp/public/stylesheets</div><div class="line">   create : myapp/public/stylesheets/style.css</div><div class="line">   create : myapp/views</div><div class="line">   create : myapp/views/index.jade</div><div class="line">   create : myapp/views/layout.jade</div><div class="line">   create : myapp/views/error.jade</div><div class="line">   create : myapp/bin</div><div class="line">   create : myapp/bin/www</div></pre></td></tr></table></figure></p>
<p>然后安装所有依赖包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd myapp </div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>启动这个应用（MacOS 或 Linux 平台）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ DEBUG=myapp npm start</div></pre></td></tr></table></figure>
<p>Windows 平台使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; set DEBUG=myapp &amp; npm start</div></pre></td></tr></table></figure>
<p>然后在浏览器中打开 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a> 网址就可以看到这个应用了。<br>通过 Express 应用生成器创建的应用一般都有如下目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── app.js</div><div class="line">├── bin</div><div class="line">│   └── www</div><div class="line">├── package.json</div><div class="line">├── public</div><div class="line">│   ├── images</div><div class="line">│   ├── javascripts</div><div class="line">│   └── stylesheets</div><div class="line">│       └── style.css</div><div class="line">├── routes</div><div class="line">│   ├── index.js</div><div class="line">│   └── users.js</div><div class="line">└── views</div><div class="line">    ├── error.jade</div><div class="line">    ├── index.jade</div><div class="line">    └── layout.jade</div><div class="line"></div><div class="line">7 directories, 9 files</div></pre></td></tr></table></figure></p>
<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="连接本地数据库"><a href="#连接本地数据库" class="headerlink" title="连接本地数据库"></a>连接本地数据库</h3><p>安装navicat和MySQL。<br>进入【系统偏好设置】启动本地mysql服务:<br><img src="http://7xw4c0.com1.z0.glb.clouddn.com/mysqlrun.png?imageView/2/w/619/q/100" alt="run mysql"><br>在navicat中连接本地数据库:<br><img src="http://7xw4c0.com1.z0.glb.clouddn.com/newsql.png?imageView/2/w/500/q/100" alt="connect mysql"></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建一个测试数据库nodesample，在数据库中建一个userinfo表<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> nodesample <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> UTF8;</div><div class="line"></div><div class="line"><span class="keyword">USE</span> nodesample;</div><div class="line"> </div><div class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`userinfo`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`userinfo`</span> (</div><div class="line"><span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</div><div class="line"><span class="string">`UserName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</div><div class="line"><span class="string">`UserPass`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户信息表'</span>;</div></pre></td></tr></table></figure></p>
<h2 id="node连接数据库"><a href="#node连接数据库" class="headerlink" title="node连接数据库"></a>node连接数据库</h2><p>Node.js与MySQL交互操作有很多库,这里选择<a href="https://github.com/felixge/node-mysql" target="_blank" rel="external">felixge/node-mysql</a>。<br>安装mysql模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install mysql --save</div></pre></td></tr></table></figure></p>
<p>打开<code>routes/users.js</code>,引入mysql模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</div></pre></td></tr></table></figure></p>
<p>建立连接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</div><div class="line">  host: <span class="string">'127.0.0.1'</span>,</div><div class="line">  user: <span class="string">'root'</span>,</div><div class="line">  password: <span class="string">'123'</span>,</div><div class="line">  port: <span class="string">'3306'</span>,</div><div class="line">  database: <span class="string">'nodesample'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(!err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Database is connected ... nn"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Error connecting database ... nn"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="实现RESTFUL接口"><a href="#实现RESTFUL接口" class="headerlink" title="实现RESTFUL接口"></a>实现RESTFUL接口</h2><ol>
<li><p>增</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * PUT to updateuser.</div><div class="line"> */</div><div class="line">router.put(<span class="string">'/updateuser/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> userUpSql = <span class="string">'UPDATE userinfo SET ? WHERE Id='</span>+req.params.id;</div><div class="line">  connection.query(userUpSql, req.body, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    res.send(</div><div class="line">        (err === <span class="literal">null</span>) ? &#123; msg: <span class="string">''</span> &#125; : &#123; msg: err &#125;</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>删</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * DELETE to deleteuser.</div><div class="line"> */</div><div class="line">router.delete(<span class="string">'/deleteuser/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> userDelSql = <span class="string">'DELETE FROM userinfo  where Id='</span>+req.params.id;</div><div class="line">  connection.query(userDelSql, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    res.send((err === <span class="literal">null</span>) ? &#123; msg: <span class="string">''</span> &#125; : &#123; msg:<span class="string">'error: '</span> + err &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>改</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * POST to adduser.</div><div class="line"> */</div><div class="line">router.post(<span class="string">'/adduser'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  connection.query(<span class="string">'INSERT INTO userinfo SET ?'</span>, req.body, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line">    res.send(</div><div class="line">        (err === <span class="literal">null</span>) ? &#123; msg: <span class="string">''</span> &#125; : &#123; msg: err &#125;</div><div class="line">    );</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>查</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* GET users listing. */</span></div><div class="line">router.get(<span class="string">"/userlist"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">  connection.query(<span class="string">'SELECT * from userinfo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows, fields</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!err)</div><div class="line">      res.json(rows);</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Error while performing Query.'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="画页面"><a href="#画页面" class="headerlink" title="画页面"></a>画页面</h2><p>在public/javascripts中新建global.js,并打开views/layout.jade,<br>在末尾引入jquery和global.js。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">script(src=&apos;http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js&apos;)</div><div class="line">script(src=&apos;/javascripts/global.js&apos;)</div></pre></td></tr></table></figure></p>
<p>打开views/index.jade,写好页面结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">extends layout</div><div class="line">block content</div><div class="line">  // Wrapper</div><div class="line">  #wrapper</div><div class="line">    // USER INFO</div><div class="line">    #userInfo</div><div class="line">      h2 User Info</div><div class="line">      p</div><div class="line">        strong Name:</div><div class="line">        |  &lt;span id=&apos;UserName&apos;&gt;&lt;/span&gt;</div><div class="line">        br</div><div class="line">        strong Pass:</div><div class="line">        |  &lt;span id=&apos;UserPass&apos;&gt;&lt;/span&gt;</div><div class="line">    // /USER INFO</div><div class="line"></div><div class="line">    // USER LIST</div><div class="line">    h2 User List</div><div class="line">    #userList</div><div class="line">      table</div><div class="line">        thead</div><div class="line">          th UserName</div><div class="line">          th UserPass</div><div class="line">          th Delete?</div><div class="line">          th Edit?</div><div class="line">        tbody</div><div class="line">    // /USER LIST</div><div class="line"></div><div class="line">    // ADD USER</div><div class="line">    h2 Add User</div><div class="line">    #addUser</div><div class="line">      fieldset</div><div class="line">        input#inputUserName(type=&apos;text&apos;, placeholder=&apos;Username&apos;)</div><div class="line">        input#inputUserPass(type=&apos;text&apos;, placeholder=&apos;UserPass&apos;)</div><div class="line">        br</div><div class="line">        button#btnAddUser Add User</div><div class="line">    // /ADD USER</div><div class="line"></div><div class="line">    .mask</div><div class="line">    #upUser.alert</div><div class="line">      fieldset</div><div class="line">        input#modId(type=&apos;hidden&apos;)</div><div class="line">        input#modUserName(type=&apos;text&apos;, placeholder=&apos;Username&apos;)</div><div class="line">        input#modUserPass(type=&apos;text&apos;, placeholder=&apos;UserPass&apos;)</div><div class="line">        br</div><div class="line">        button#btnModUser Modify User</div></pre></td></tr></table></figure></p>
<p>样式写在public/stylesheets/style.css里,可以看我放到<a href="https://github.com/YehanZhou/node-mysql-tutorial" target="_blank" rel="external">github</a>上的源码。</p>
<h2 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h2><p>在上面新建的global.js里编写调用接口的代码</p>
<ol>
<li><p>查数据并画表格</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateTable</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tableContent = <span class="string">''</span>;</div><div class="line">    $.getJSON( <span class="string">'/users/userlist'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> data </span>) </span>&#123;</div><div class="line">        userListData = data;</div><div class="line">        $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            tableContent += <span class="string">'&lt;tr&gt;'</span>;</div><div class="line">            tableContent += <span class="string">'&lt;td&gt;&lt;a href="#" class="linkshowuser" rel="'</span> + <span class="keyword">this</span>.UserName + <span class="string">'" title="Show Details"&gt;'</span> + <span class="keyword">this</span>.UserName + <span class="string">'&lt;/a&gt;&lt;/td&gt;'</span>;</div><div class="line">            tableContent += <span class="string">'&lt;td&gt;'</span> + <span class="keyword">this</span>.UserPass + <span class="string">'&lt;/td&gt;'</span>;</div><div class="line">            tableContent += <span class="string">'&lt;td&gt;&lt;a href="#" class="linkdeleteuser" rel="'</span> + <span class="keyword">this</span>.Id + <span class="string">'"&gt;delete&lt;/a&gt;&lt;/td&gt;'</span>;</div><div class="line">            tableContent += <span class="string">'&lt;td&gt;&lt;a href="#" class="linkupdateuser" rel="'</span> + <span class="keyword">this</span>.Id + <span class="string">'"&gt;edit&lt;/a&gt;&lt;/td&gt;'</span>;</div><div class="line">            tableContent += <span class="string">'&lt;/tr&gt;'</span>;</div><div class="line">        &#125;);</div><div class="line">        $(<span class="string">'#userList table tbody'</span>).html(tableContent);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>增</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event.preventDefault();</div><div class="line">    <span class="comment">// 每个输入框必填</span></div><div class="line">    <span class="keyword">var</span> errorCount = <span class="number">0</span>;</div><div class="line">    $(<span class="string">'#addUser input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).val() === <span class="string">''</span>) &#123; errorCount++; &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">if</span>(errorCount === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">var</span> newUser = &#123;</div><div class="line">            <span class="string">'UserName'</span>: $(<span class="string">'#addUser fieldset input#inputUserName'</span>).val(),</div><div class="line">            <span class="string">'UserPass'</span>: $(<span class="string">'#addUser fieldset input#inputUserPass'</span>).val()</div><div class="line">        &#125;;</div><div class="line">        $.ajax(&#123;</div><div class="line">            type: <span class="string">'POST'</span>,</div><div class="line">            url: <span class="string">'/users/adduser'</span>,</div><div class="line">            data: newUser,</div><div class="line">            dataType: <span class="string">'JSON'</span></div><div class="line">        &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> response </span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (response.msg === <span class="string">''</span>) &#123;</div><div class="line">                <span class="comment">// Clear the form inputs</span></div><div class="line">                $(<span class="string">'#addUser fieldset input'</span>).val(<span class="string">''</span>);</div><div class="line">                <span class="comment">// Update the table</span></div><div class="line">                populateTable();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                alert(<span class="string">'Error: '</span> + response.msg);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        alert(<span class="string">'Please fill in all fields'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>删</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteUser</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event.preventDefault();</div><div class="line">    <span class="comment">// 确定删除吗</span></div><div class="line">    <span class="keyword">var</span> confirmation = confirm(<span class="string">'Are you sure you want to delete this user?'</span>);</div><div class="line">    <span class="keyword">if</span> (confirmation === <span class="literal">true</span>) &#123;</div><div class="line">        $.ajax(&#123;</div><div class="line">            type: <span class="string">'DELETE'</span>,</div><div class="line">            url: <span class="string">'/users/deleteuser/'</span> + $(<span class="keyword">this</span>).attr(<span class="string">'rel'</span>)</div><div class="line">        &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> response </span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (response.msg === <span class="string">''</span>) &#123;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                alert(<span class="string">'Error: '</span> + response.msg);</div><div class="line">            &#125;</div><div class="line">            populateTable();</div><div class="line"></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>改</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUser</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event.preventDefault();</div><div class="line">    <span class="comment">// 每个输入框必填</span></div><div class="line">    <span class="keyword">var</span> errorCount = <span class="number">0</span>;</div><div class="line">    $(<span class="string">'#upUser input'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, val</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>($(<span class="keyword">this</span>).val() === <span class="string">''</span>) &#123; errorCount++; &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">if</span>(errorCount === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">var</span> upUser = &#123;</div><div class="line">            <span class="string">'UserName'</span>: $(<span class="string">'#upUser fieldset input#modUserName'</span>).val(),</div><div class="line">            <span class="string">'UserPass'</span>: $(<span class="string">'#upUser fieldset input#modUserPass'</span>).val()</div><div class="line">        &#125;;</div><div class="line">        $.ajax(&#123;</div><div class="line">            type: <span class="string">'PUT'</span>,</div><div class="line">            url: <span class="string">'/users/updateuser/'</span> + $(<span class="string">'#upUser fieldset input#modId'</span>).val(),</div><div class="line">            data: upUser,</div><div class="line">            dataType: <span class="string">'JSON'</span></div><div class="line">        &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"> response </span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (response.msg === <span class="string">''</span>) &#123;</div><div class="line">                $(<span class="string">'.mask'</span>).hide();</div><div class="line">                $(<span class="string">'.alert'</span>).hide();</div><div class="line">                populateTable();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                alert(<span class="string">'Error: '</span> + response.msg);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>完整的代码可以去<a href="https://github.com/YehanZhou/node-mysql-tutorial" target="_blank" rel="external">github</a>上查看,以下是最终效果:<br><img src="http://7xw4c0.com1.z0.glb.clouddn.com/view.png?imageView/2/w/619/q/100" alt="final view"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><h3 id="express"><a href="#express" class="headerlink" title="express"></a>express</h3><p><a href="http://cwbuecheler.com/web/tutorials/2014/restful-web-app-node-express-mongodb/" target="_blank" rel="external">用NODE.JS,EXPRESS,MONGODB创建一个简单的RESTFUL WEB APP</a></p>
<p><a href="http://www.expressjs.com.cn/" target="_blank" rel="external">express中文网</a></p>
<h3 id="mysql与node"><a href="#mysql与node" class="headerlink" title="mysql与node"></a>mysql与node</h3><p><a href="http://blog.csdn.net/gebitan505/article/details/46346917" target="_blank" rel="external">Nodejs学习笔记(四)与MySQL交互(felixge/node-mysql)</a></p>
<p><a href="https://codeforgeek.com/2015/01/nodejs-mysql-tutorial/" target="_blank" rel="external">Node.js and MySQL tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Express生成应用&quot;&gt;&lt;a href=&quot;#Express生成应用&quot; class=&quot;headerlink&quot; title=&quot;Express生成应用&quot;&gt;&lt;/a&gt;Express生成应用&lt;/h2&gt;&lt;p&gt;首先假定你已经安装了&lt;a href=&quot;https://nodejs.
    
    </summary>
    
    
      <category term="node" scheme="https://yehanzhou.github.io/tags/node/"/>
    
      <category term="mysql" scheme="https://yehanzhou.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JS中Math.random()的使用和扩展</title>
    <link href="https://yehanzhou.github.io/2016/09/21/js-random/"/>
    <id>https://yehanzhou.github.io/2016/09/21/js-random/</id>
    <published>2016-09-21T02:31:41.000Z</published>
    <updated>2016-09-22T07:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Math.random()方法返回大于等于 0 小于 1 的一个随机数。对于某些站点来说，这个方法非常实用，因为可以利用它来随机显示一些名人名言和新闻事件。</p>
<h2 id="在连续整数中取得一个随机数"><a href="#在连续整数中取得一个随机数" class="headerlink" title="在连续整数中取得一个随机数"></a>在连续整数中取得一个随机数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值)</div></pre></td></tr></table></figure>
<p>例：产生1-10的随机数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rand1 = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>编写产生startNumber至endNumber随机数的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">startNumber, endNumber</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> choice = endNumber - startNumber + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * choice + startNumber)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> rand2 = selectFrom(<span class="number">2</span>,<span class="number">8</span>);<span class="comment">//产生2至8的随机数</span></div></pre></td></tr></table></figure></p>
<h2 id="在不相邻整数中取得一个随机数"><a href="#在不相邻整数中取得一个随机数" class="headerlink" title="在不相邻整数中取得一个随机数"></a>在不相邻整数中取得一个随机数</h2><h3 id="在不相邻的两个整数中取得一个随机数"><a href="#在不相邻的两个整数中取得一个随机数" class="headerlink" title="在不相邻的两个整数中取得一个随机数"></a>在不相邻的两个整数中取得一个随机数</h3><p>例：随机产生2或4中的一个数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rand3 = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? <span class="number">2</span> : <span class="number">4</span>;</div></pre></td></tr></table></figure></p>
<h3 id="在不相邻的多个整数中产生一个随机数"><a href="#在不相邻的多个整数中产生一个随机数" class="headerlink" title="在不相邻的多个整数中产生一个随机数"></a>在不相邻的多个整数中产生一个随机数</h3><p>结合函数参数数组，可编写在不相邻的多个整数中产生一个随机值的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFromMess</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">arguments</span>.length)]</div><div class="line">&#125;</div><div class="line"><span class="comment">//随机产生1、6、8中的一个数</span></div><div class="line"><span class="keyword">var</span> rand4 = selectFromMess(<span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>);</div><div class="line"></div><div class="line"><span class="comment">//也可随机产生文本</span></div><div class="line"><span class="keyword">var</span> randomTxt1 = selectFromMess(<span class="string">"安慰奖"</span>, <span class="string">"二等奖"</span>, <span class="string">"一等奖"</span>);</div></pre></td></tr></table></figure></p>
<p>每次要输入这么多参数比较麻烦，可以改写一下函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFromMessArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)]</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arrayTxt=[<span class="string">"一"</span>,<span class="string">"二"</span>,<span class="string">"三"</span>,<span class="string">"四"</span>,<span class="string">"五"</span>];</div><div class="line"><span class="keyword">var</span> randTxt2 = selectFromMessArray(arrayTxt);</div></pre></td></tr></table></figure></p>
<p>或者不改变原有方法，可以利用apply()这个方法传递数组参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> randTxt3 = selectFromMess.apply(<span class="literal">null</span>,arrayTxt);</div></pre></td></tr></table></figure></p>
<p>关于apply方法的使用可以<a href="http://www.cnblogs.com/delin/archive/2010/06/17/1759695.html" target="_blank" rel="external">看这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Math.random()方法返回大于等于 0 小于 1 的一个随机数。对于某些站点来说，这个方法非常实用，因为可以利用它来随机显示一些名人名言和新闻事件。&lt;/p&gt;
&lt;h2 id=&quot;在连续整数中取得一个随机数&quot;&gt;&lt;a href=&quot;#在连续整数中取得一个随机数&quot; class=
    
    </summary>
    
      <category term="学习笔记" scheme="https://yehanzhou.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="js基础" scheme="https://yehanzhou.github.io/tags/js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>将本地仓库提交到github上</title>
    <link href="https://yehanzhou.github.io/2016/09/19/git-command/"/>
    <id>https://yehanzhou.github.io/2016/09/19/git-command/</id>
    <published>2016-09-19T02:32:10.000Z</published>
    <updated>2016-09-19T08:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>先在github上新建一个仓库,取名,例test</p>
</li>
<li><p>本地新建文件夹</p>
</li>
<li><p>打开命令行工具cd进这个文件夹</p>
</li>
<li><p>执行<code>git init</code>,执行后会在该文件夹下生成一个名为.git的文件夹,里面有有关git的配置</p>
</li>
<li><p>关联到远程仓库<br><code>git remote add origin https://YehanZhou@github.com/YehanZhou/test.git</code></p>
</li>
<li><p>添加所有文件到暂存区<br><code>git add .</code></p>
</li>
<li><p>提交<br><code>git commit -m &quot;description&quot;</code></p>
</li>
<li><p>推送<br><code>git push -u origin master</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;先在github上新建一个仓库,取名,例test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地新建文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开命令行工具cd进这个文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;git init&lt;/code&gt;,执行后会
    
    </summary>
    
    
      <category term="git" scheme="https://yehanzhou.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo命令</title>
    <link href="https://yehanzhou.github.io/2016/09/18/hello-world/"/>
    <id>https://yehanzhou.github.io/2016/09/18/hello-world/</id>
    <published>2016-09-18T02:32:10.000Z</published>
    <updated>2016-11-14T04:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="学习笔记" scheme="https://yehanzhou.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="https://yehanzhou.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
